//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "famille_mtcs")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub code: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub designation: Option<String>,
    pub pix: Option<String>,
    pub letype_id: i32,
    pub marque_id: i32,
    pub prix_ttc: Option<Decimal>,
    pub famille_id: i32,
    pub depot_id: i32,
    pub centre_id: i32,
    pub reference: Option<String>,
    pub oem: Option<String>,
    pub marque_oem_id: i32,
    pub keywords: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::centres::Entity",
        from = "Column::CentreId",
        to = "super::centres::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Centres,
    #[sea_orm(
        belongs_to = "super::depots::Entity",
        from = "Column::DepotId",
        to = "super::depots::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Depots,
    #[sea_orm(
        belongs_to = "super::familles::Entity",
        from = "Column::FamilleId",
        to = "super::familles::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Familles,
    #[sea_orm(
        belongs_to = "super::letypes::Entity",
        from = "Column::LetypeId",
        to = "super::letypes::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Letypes,
    #[sea_orm(
        belongs_to = "super::marque_oems::Entity",
        from = "Column::MarqueOemId",
        to = "super::marque_oems::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MarqueOems,
    #[sea_orm(
        belongs_to = "super::marques::Entity",
        from = "Column::MarqueId",
        to = "super::marques::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Marques,
}

impl Related<super::centres::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Centres.def()
    }
}

impl Related<super::depots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Depots.def()
    }
}

impl Related<super::familles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Familles.def()
    }
}

impl Related<super::letypes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Letypes.def()
    }
}

impl Related<super::marque_oems::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MarqueOems.def()
    }
}

impl Related<super::marques::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Marques.def()
    }
}
